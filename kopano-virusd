#!/usr/bin/env python
# coding=utf-8

# Copyright 2019 by Bastian Machek <bm@machek.systems>
# https://github.com/bmachek/kopano-virusd
# All rights reserved.

# kopano-virusd
# ICS based live virus scanner with batch scan functionality.
# Used anti virus engine Sophos AV with SAVDI daemon.
# For more information see README.md

import subprocess
import time
import kopano
import sssp
import traceback
from MAPI.Tags import *
from MAPI.Util import *
from kopano import Config, log_exc
from thread import start_new_thread
from threading import Thread, current_thread

CONFIG = {
	'run_as_user': Config.string(default="kopano"),
	'run_as_group': Config.string(default="kopano"),
	'autoremove': Config.boolean(default=False),
	'move_mails': Config.boolean(default=False),
	'sssp_ip': Config.string(default="127.0.0.1"),
	'sssp_port': Config.integer(default=4010),
	'batch_scan_interval': Config.integer(default=24*3600), # Scan all attachments every x seconds. Default 1d
	'livescanner_enabled': Config.boolean(default=False),
	'batchscanner_enabled': Config.boolean(default=False),
	'virus_folder': Config.string(default="Cleaned"),
	'clean_subject_tag': Config.string(default="[CLEANED]"),
	'virus_subject_tag': Config.string(default="[VIRUS]"),
	'notification_mail_address': Config.string(default=""),
	'notification_public_folder': Config.string(default="Virus"),
	'notification_sender': Config.string(default=""),
}

class Service(kopano.Service):
	def main(self):
		self.server = self.server
		self.state = self.server.state
		self.sssp_ip = self.config['sssp_ip']
		self.sssp_port = self.config['sssp_port']
		self.virus_scanner = sssp.sssp(self.sssp_ip, self.sssp_port)
		self.autoremove = self.config['autoremove'] # or self.options['autoremove']
		self.public_store = self.server.company("Default").public_store # TODO

		if self.autoremove:
			self.log.info("Autoremove is enabled.")
		else:
			self.log.info("Autoremove is disabled.")

		self.catcher = Checker(self)
		if self.config['livescanner_enabled']:
			self.log.info("LiveScanner enabled.")
			start_new_thread(self.livescanner, ())
		else:
			self.log.info("LiveScanner disabled.")
			
		
		if self.config['batchscanner_enabled']:
			self.log.info("BatchScanner enabled.")
			start_new_thread(self.batchscanner, ())
		else:
			self.log.info("BatchScanner disabled.")
		
		while True:
			time.sleep(24*3600)
			self.log.info("Main thread woke up. Going asleep again.")
		
	def livescanner(self):
		current_thread().setName('LiveScanner')
		self.log.info('LiveScanner: Starting.')
		
		while True:
			try:
				self.state = self.server.sync(self.catcher, self.state)
			except Exception as e:
				self.log.error('Error: [%s]' % e)
				self.send_notification('kopano-virusd: Error', 'Error: [%s]' % e)
				time.sleep(5)
			time.sleep(1)

	def batchscanner(self):
		current_thread().setName('BatchScanner')
		while True:
			virus_count = 0
			scanned_mails_count = 0
			start_time = time.time()
			self.log.info ('BatchScanner: Starting.')
			for user in self.server.users():
				self.log.info('BatchScanner: Scanning user: [%s]' % user.name)
				for folder in user.store.folders():
					self.log.info ('BatchScanner: Scanning user: [%s] folder: [%s]' % (user.name, folder.name))
					for item in folder.items():
						virus_count += self.scanmail(item)
						scanned_mails_count += 1
			self.log.info('BatchScanner: Finished. Scanned %s mails in %s secs. Found viruses: %s Sleeping for %s seconds' % (scanned_mails_count, time.time() - start_time, virus_count, self.config['batch_scan_interval']))
			time.sleep(self.config['batch_scan_interval'])

	def scanmail(self, email):
		user = email.store.user
		virus_found = False
		virus_count = 0
		
		virus_body = self.scan_body(email)
		if virus_body != '': # Virus detected.
			self.log.critical('Virus found by %s: User: %s, Folder: %s, Subject: %s, Virus: %s' % (current_thread().name, user.name, email.folder.name, email.subject, virus_body))
			virus_found = True
			virus_count += 1
			if self.autoremove:
				email.delete()
			else:
				email.subject = self.config['virus_subject_tag'] + " " + email.subject
			
			self.send_notification('Virus found!', 'Virus found: User: %s, Folder: %s, Subject: %s, Virus: %s' % (user.name, email.folder.name, email.subject, virus_body))

		
		for attachment in email.attachments():
			try:
				virus = self.scan_attachment(attachment)
				if virus == '': # No virus detected.
					continue
				else:
					self.log.critical('Virus found by %s: User: %s, Folder: %s, Subject: %s, Filename: %s, Virus: %s' % (current_thread().name, user.name, email.folder.name, email.subject, attachment.name, virus))
					virus_found = True
					virus_count += 1
					self.send_notification('Virus found!', 'Virus found by %s: User: %s, Folder: %s, Subject: %s, Filename: %s, Virus: %s' % (current_thread().name, user.name, email.folder.name, email.subject, attachment.name, virus))
					try:
						if self.autoremove:
							email.subject = self.config['clean_subject_tag'] + " " + email.subject
							self.delete_attachment(email, attachment, virus)
						else: 
							email.subject = self.config['virus_subject_tag'] + " " + email.subject
							msg = "Attachment %s *IS* infected with: %s" % (attachment.filename, virus)
							email.text = msg + "\n" + email.text
					except Exception as del_e:
						self.log.error("Unable to remove attachment: [%s] [%s] [%s]" % (email.subject, attachment.name, del_e))
						self.send_notification('kopano-virusd: Error', "Unable to remove attachment: [%s] [%s] [%s]" % (email.subject, attachment.name, del_e))
			except Exception as e:
				self.log.error("Unable to scan attachment: User: %s, Folder: %s, Subject: %s, Filename: %s, Exception: %s" % (user.name, email.folder.name, email.subject, attachment.name, e))
				self.send_notification('kopano-virusd: Error', "Unable to scan attachment: User: %s, Folder: %s, Subject: %s, Filename: %s, Exception: %s" % (user.name, email.folder.name, email.subject, attachment.name, e))
		if virus_found:
			if self.config['notification_public_folder']:
				public_copy = email.copy(self.public_store.folder(self.config['notification_public_folder']))
			if self.autoremove and self.config['move_mails']:
				email.move(email.store.folder(self.config['virus_folder'], None, False, True)) # Create if it doesn't exist.
			
		return virus_count


	def delete_attachment(self, email, attachment, virus):
		msg = "Attachment %s was infected with: %s" % (attachment.filename, virus)
		self.log.info ('Autoremoving attachment: [%s]' % (attachment.name))
		email.delete(attachment)
		email.create_attachment(attachment.filename + "-removed.txt", msg)
		email.text = msg + "\n" + email.text

	def scanner_selftest(self):
		try: 
			if self.virus_scanner.selftest():
				return True

		except Exception as e:
			try:
				self.log.error("Virus scanner self-test failed. Will try to reconnect to SAVDI daemon and try again.")
				self.virus_scanner.disconnect()
				self.virus_scanner.connect()
				if self.virus_scanner.selftest():
					self.log.info('Virus scanner seems operable again after reconnect to SAVDI daemon!')
					return True
			except:
				self.log.critical("Virus scanner self-test failed for the second time. Please check. Will wait for 15min.")
				self.send_notification('kopano-virusd: Critical error', 'Virus scan engine not working. Please check. Will wait for 15min.')
				time.sleep(900)
			
		
		
	def scan_attachment(self, attachment):
		self.scanner_selftest()
		try:
			result, msg = self.virus_scanner.check(attachment.data)
			if result:
				return ''
			else:
				virus = msg.replace('Message is infected with ', '')
				return virus
		except:
			self.log.error('Virus scan engine reported an error: %s. Will have to skip attachment: %s. Sorry' % (traceback.format_exc(), attachment.filename))
			self.send_notification('kopano-virusd: Error', 'Virus scan engine reported an error: %s. Will have to skip attachment: %s. Sorry' % (traceback.format_exc(), attachment.filename))
			return ''

	def scan_body(self, email):
		return '' # This has yet to be fixed.
		self.scanner_selftest()
		try:
			if not self.virus_scanner.selftest():
				self.log.error("Virus scanner self-test failed. Will skip scanning email body %s. Sorry." % (email.subject))
				self.send_notification('kopano-virusd: Error', "Virus scanner self-test failed. Will skip scanning email body %s. Sorry." % (email.subject))
				return ''
			result, msg = self.virus_scanner.check(email.eml())
			if result:
				return ''
			else:
				virus = msg.replace('Message is infected with ', '')
				return virus
		except:
			self.log.error('Virus scan engine reported an error: %s. Will have to skip email body: %s. Sorry' % (traceback.format_exc(), email.subject))
			self.send_notification('kopano-virusd: Error', 'Virus scan engine reported an error: %s. Will have to skip email body: %s. Sorry' % (traceback.format_exc(), email.subject))
			return ''
			
	def send_notification(self, subject, msg):
		if self.config['notification_public_folder'] != '' and self.config['notification_sender']:
			notification = self.server.user(self.config['notification_sender']).outbox.create_item(
				to=self.config['notification_mail_address'],
				subject=subject,
				body=msg)
			notification.send()
			
class Checker(object):
	def __init__(self, service):
		self.log = service.log
		self.service = service


	def update(self, item, flags):
		if item.message_class == 'IPM.Note' and flags == 2048: # Only new mails are processed!??
			self.service.scanmail(item)

def main():
	parser = kopano.parser('ckpsF')	 # select common cmd-line options
	options, args = parser.parse_args()
	service = Service('virusd', config=CONFIG, options=options)
	service.start()



if __name__ == '__main__':
	main()
